var documenterSearchIndex = {"docs":
[{"location":"#BenchmarkFreeFermions.jl","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.jl","text":"","category":"section"},{"location":"","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.jl","text":"CurrentModule = BenchmarkFreeFermions","category":"page"},{"location":"#Contents","page":"BenchmarkFreeFermions.jl","title":"Contents","text":"","category":"section"},{"location":"","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.jl","text":"","category":"page"},{"location":"#Numerical-diagonalization","page":"BenchmarkFreeFermions.jl","title":"Numerical diagonalization","text":"","category":"section"},{"location":"","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.jl","text":"SingleParticleSpectrum\nEigenModes","category":"page"},{"location":"#BenchmarkFreeFermions.SingleParticleSpectrum","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.SingleParticleSpectrum","text":" SingleParticleSpectrum(Tij::AbstractMatrix) -> ϵ::Vector{Float64}\n\nNumerically diagonalize the hopping matrix Tij to get the single particle spectrum ϵ. Note the convention is H = - \\sum_ij Tij c_i^dag c_j.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.EigenModes","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.EigenModes","text":" EigenModes(Tij::AbstractMatrix{F}) -> ϵ::Vector{Float64}, V::Matrix{F}\n\nNumerically diagonalize the hopping matrix Tij = - V diagm(ϵ) V' to get the single particle spectrum ϵ and the eigenvectors V. Note the convention is H = - \\sum_ij Tij c_i^dag c_j and the decoupled Hamiltonian reads H = \\sum_k ϵ_k f_k^dag f_k where c_i = \\sum_k V[i,k] f_k.\n\n\n\n\n\n","category":"function"},{"location":"#Thermodynamics","page":"BenchmarkFreeFermions.jl","title":"Thermodynamics","text":"","category":"section"},{"location":"","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.jl","text":"n_fermion\nParticleNumber\nLogPartition\nEnergy\nFreeEnergy\nEntropy\nSpecificHeat_μ\nSolveChemicalPotential","category":"page"},{"location":"#BenchmarkFreeFermions.n_fermion","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.n_fermion","text":" n_fermion(x::Real, β::Real) -> ::Float64\n n_fermion(x::Real, lsβ::AbstractVector{<:Real}) -> ::Vector{Float64}\n  n_fermion(lsx::AbstractVector{<:Real}, β::Real) -> ::Vector{Float64}\n\nThe Fermi-Dirac distribution x -> 1 / (e^{βx} + 1).\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.ParticleNumber","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.ParticleNumber","text":" ParticleNumber(ϵ::Vector{Float64}, β::Real, μ::Real) -> Ntot::Float64\n\nReturn the total particle number Ntot = \\sum_k nk with given chemical potential μ.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.LogPartition","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.LogPartition","text":" LogPartition(ϵ::Vector{Float64}, β::Real, μ::Real) -> lnZ::Float64\n\nReturn the logarithm of the partition function.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.Energy","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.Energy","text":" Energy(ϵ::Vector{Float64}, β::Real, μ::Real) -> E::Float64\n\nReturn the total inner energy E = \\sum_k ϵk nk.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.FreeEnergy","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.FreeEnergy","text":" FreeEnergy(ϵ::Vector{Float64}, β::Real, μ::Real) -> F::Float64\n\nReturn the free energy F = - lnZ/β + μN.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.Entropy","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.Entropy","text":" Entropy(ϵ::Vector{Float64}, β::Real, μ::Real)) -> S::Float64\n\nReturn the thermal entropy S = β(E - F).\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.SpecificHeat_μ","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.SpecificHeat_μ","text":" SpecificHeat_μ(ϵ::Vector{Float64}, β::Real, μ::Real) -> C_μ::Float64\n\nReturn the fixed-chemical-potential specific heat C_μ = (∂(E - μN) / ∂T)_μ.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.SolveChemicalPotential","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.SolveChemicalPotential","text":" SolveChemicalPotential(ϵ::Vector{Float64},   \n      β::Real,\n      n::Real) -> μ::Float64\n\nReturn the chemical potential μ that leads to the given average particle number n ∈ (0, 1).  \n\n\n\n\n\n","category":"function"},{"location":"#Observables","page":"BenchmarkFreeFermions.jl","title":"Observables","text":"","category":"section"},{"location":"","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.jl","text":"GreenFunction\nExpectationValue\nTimeCorrelation\nDensity","category":"page"},{"location":"#BenchmarkFreeFermions.GreenFunction","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.GreenFunction","text":" GreenFunction(ξ::Vector{Float64}, V::Matrix{F}, β::Real; τ::Number=0.0) -> G::Matrix{F}\n GreenFunction(ξ::Vector{Float64}, V::Matrix{F}, β::Real,\n i::Int64, j::Int64;\n τ::Number=0.0,\n reverse::Bool = false) -> Gij::F\n\nCompute the Green's funtion Gij(τ) = ⟨c_i(τ) c_j^dag⟩ (up to a coefficient) with the shifted single particle spectrum ξ = ϵ - μ and the eigenvectors V obtained from Tij = - V diagm(ϵ) V'.\n\nKwargs\n\n reverse::Bool = false\n\nReturn ⟨c_i^dag(τ) c_j⟩ instead if reverse = true.\n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.ExpectationValue","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.ExpectationValue","text":" ExpectationValue(G::Matrix{F},\n      si::Vector{Int64},\n      dagidx::Vector{Int64}) -> ::F\n\nReturn the expectation value of severial fermionic operators. si denotes the sites and dagidx tells whether the operator is daggered or not. For example, si = [i, j] and dagidx = [2] means the single particle correlation c_i c_j^dag and si = [i, j, k, l] and dagidx = [3, 4] means the pairing correlation c_i c_j c_k^dag c_l^dag. \n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.TimeCorrelation","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.TimeCorrelation","text":" TimeCorrelation(ξ::Vector{Float64},\n      V::Matrix,\n      β::Real,\n      si::Vector{Int64},\n      dagidx::Vector{Int64},\n      lsτ::AbstractVector{<:Number}) -> ::Float64(::ComplexF64)\n\nReturn the time correlation function with the shifted single particle spectrum ξ = ϵ - μ and the eigenvectors V obtained from Tij = - V diagm(ϵ) V'. si denotes the sites and dagidx tells whether the operator is daggered or not. lsτ has the same length as si and tells the time of each operator. For example, si = [i, j, k, l], dagidx = [1, 3] and lsτ = [τ1, τ2, 0, 0] means c_i^dag(τ1) c_j(τ2) c_k^dag c_l.   \n\n\n\n\n\n","category":"function"},{"location":"#BenchmarkFreeFermions.Density","page":"BenchmarkFreeFermions.jl","title":"BenchmarkFreeFermions.Density","text":" Density(G::Matrix, si::Int64) -> ::Float64\n Density(G::Matrix, lssi::AbstractVector{Int64}) -> ::Vector{Float64}\n\nReturn the local density n_i with the green function G.\n\n\n\n\n\n","category":"function"}]
}
